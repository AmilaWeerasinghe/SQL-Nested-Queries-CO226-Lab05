1. Write a nested query to list the details of the movies directed by a director, 
(a) who is also a reviewer. (1 mark) 
MariaDB [e15385lab04]> select * from MOVIE where DIRECTOR in (select REVIEWERNAM
E from REVIEWER);
+---------+---------+------+----------------+
| MOVIEID | TITLE   | YEAR | DIRECTOR       |
+---------+---------+------+----------------+
 |    105 | Titanic | 1997 | James Cameron
 |    107 | Avatar  | 2009 | James Cameron
+---------+---------+------+----------------+
2 rows in set (0.16 sec)


(b) who is not a reviewer. (1 mark)

MariaDB [e15385lab04]> select * from MOVIE where DIRECTOR not  in (select REVIEW
ERNAME from REVIEWER);
+---------+-------------------------+------+------------------+
| MOVIEID | TITLE                   | YEAR | DIRECTOR         |
+---------+-------------------------+------+------------------+
|     101 |  Gone with the Wind     | 1939 | Victor Fleming   |
    | 102 | Star Wars               | 1977 | George Lucas
     |103 | The Sound of Music      | 1965 | Robert Wise
|     104 | E.T.                    | 1982 | Steven Spielberg |
|     108 | Raiders of the Lost Ark | 1981 | Steven Spielberg |
+---------+-------------------------+------+------------------+
5 rows in set (0.00 sec)

2. Write a nested query to list the details of the movie ratings, 

(a) reviewed by the reviewer Sarah Martinez. (1 mark) 
MariaDB [e15385lab04]> select * from RATING where REVIEWERID in (select REVIEWER
ID from REVIEWER where REVIEWERNAME='Sarah Martinez');
+------------+---------+-------+------------+
| REVIEWERID | MOVIEID | STARS | RATINGDATE |
+------------+---------+-------+------------+
|        201 |     101 |     3 | 2011-01-22 |
|        201 |     101 |     5 | 2011-01-27 |
+------------+---------+-------+------------+

(b) not reviewed by the reviewer Sarah Martinez. (1 mark) 

MariaDB [e15385lab04]> select * from RATING where REVIEWERID not in (select REVI
EWERID from REVIEWER where REVIEWERNAME='Sarah Martinez');
+------------+---------+-------+------------+
| REVIEWERID | MOVIEID | STARS | RATINGDATE |
+------------+---------+-------+------------+
|        202 |     106 |     4 | NULL       |
|        203 |     103 |     2 | 2011-01-20 |
|        203 |     108 |     4 | 2011-01-30 |
|        203 |     108 |     2 | 2011-01-12 |
|        204 |     101 |     3 | 2011-01-09 |
|        205 |     103 |     3 | 2011-01-27 |
|        205 |     104 |     2 | 2011-01-22 |
|        205 |     108 |     4 | NULL       |
|        206 |     106 |     3 | 0000-00-00 |
|        206 |     107 |     5 | 2011-01-15 |
|        207 |     107 |     5 | 2011-01-20 |
|        208 |     104 |     3 | 2011-01-02 |
+------------+---------+-------+------------+
15 rows in set (0.00 sec)

3. Write a nested query to list the movieids where each movie has some rating
(a) less than to any of the ratings received by the movie which has a movie id equal to 103. (1 mark)


MariaDB [e15385lab04]> select MOVIEID from RATING where STARS < any  (select STA
RS from RATING where MOVIEID=103);
+---------+
| MOVIEID |
+---------+
|     101 |
|     101 |
|     104 |
+---------+
3 rows in set (0.00 sec)




(b) less than or equal to any of the ratings received by the movie which has a movie id equal to103. (1 mark) 
Empty set (0.00 sec)

MariaDB [e15385lab04]> select MOVIEID from RATING where STARS <= any  (select ST
ARS from RATING where MOVIEID=103);
+---------+
| MOVIEID |
+---------+
|     101 |
|     101 |
|     103 |
|     108 |
|     101 |
|     103 |
|     104 |
|     106 |
|     107 |
|     104 |
+---------+
10 rows in set (0.00 sec)


(c) equal to any of the ratings received by the movie which has amovieidequal to103. (1 mark)

MariaDB [e15385lab04]> select MOVIEID from RATING where STARS = any  (select STA
RS from RATING where MOVIEID=103);
+---------+
| MOVIEID |
+---------+
|     103 |
|     108 |
|     101 |
|     103 |
|     106 |
|     107 |
|     104 |
+---------+
7 rows in set (0.00 sec)

(d) greater than to any of the ratings received by the movie which has a movie id equal to 103. (1 mark) 


MariaDB [e15385lab04]> select MOVIEID from RATING where STARS > any  (select STA
RS from RATING where MOVIEID=103);
+---------+
| MOVIEID |
+---------+
|     101 |
|     106 |
|     108 |
|     108 |
|     107 |
+---------+
5 rows in set (0.00 sec)

(e) greater than or equal to any of the ratings received by the movie which has a movie id equal to103. (1 mark)


MariaDB [e15385lab04]> select MOVIEID from RATING where STARS >= any  (select ST
ARS from RATING where MOVIEID=103);
+---------+
| MOVIEID |
+---------+
|     101 |
|     106 |
|     103 |
|     108 |
|     108 |
|     101 |
|     103 |
|     108 |
|     106 |
|     107 |
|     107 |
|     104 |
+---------+
12 rows in set (0.00 sec)


(f) not equal to any of the ratings received by the movie which has a movieid equal to 103. (1 mark) 


MariaDB [e15385lab04]> select MOVIEID from RATING where STARS not in (select STA
RS from RATING where MOVIEID=103);
+---------+
| MOVIEID |
+---------+
|     101 |
|     101 |
|     101 |
|     106 |
|     108 |
|     104 |
|     108 |
|     107 |
+---------+
8 rows in set (0.32 sec)


4. Write a nested query to list the reviewer ids who has the same (movieid, stars) combination on some movie which has a rating date equal to 2011-01-12. (5 marks) 




5. Find all the years that have a movie that received a rating  of 4 or 5 and sort them in increasing order of the year. Write
 
 (a) a non-nested query. (5 marks) 
SELECT YEAR FROM MOVIE,RATING WHERE STARS BETWEEN 4 AND 5 AND MOVIE.MOVIEID=RATING.MOVIEID ORDER BY YEAR;
+------+
| YEAR |
+------+
| 1939 |
| 1937 |
| 1937 |
| 2009 |
| 1981 |
| 1981 |
+------+
(b) a non-correlated nested query. (5 marks) 
SELECT YEAR FROM MOVIE WHERE MOVIEID IN(SELECT MOVIEID FROM RATING WHERE STARS BETWEEN 4 AND 5) ORDER BY YEAR;
+------+
| YEAR |
+------+
| 1937 |
| 1939 |
| 1981 |
| 2009 |
+------+

6. Find the titles of all movies that have no ratings. Write,

(a) non-correlated nested query. (5 marks) 
SELECT TITLE FROM MOVIE WHERE MOVIEID NOT IN(SELECT MOVIEID FROM RATING);
+-----------+
| TITLE     |
+-----------+
| Star Wars |
| Titanic   |
+-----------+



b) a correlated nested query. (5 marks) 
SELECT TITLE FROM MOVIE WHERE MOVIEID NOT IN(SELECT MOVIEID FROM RATING WHERE MOVIE.MOVIEID=RATING.MOVIEID);
+-----------+
| TITLE     |
+-----------+
| Star Wars |
| Titanic   |
+-----------+




7. Some reviewers did not provide a date with their rating. Find the names of all reviewers who have a NULL value for the date. Write,

a)SELECT REVIEWERNAME FROM REVIEWER,RATING WHERE RATINGDATE IS NULL AND RATING.REVIEWERID=REVIEWER.REVIEWERID;
+---------------+
| REVIEWERNAME  |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+
b)SELECT REVIEWERN FROM REVIEWER WHERE REVIEWERID IN(SELECT REVIEWERID FROM RATING WHERE RATINGDATE IS NULL); 
+---------------+
| REVIEWERNAME  |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+
c)SELECT REVIEWERNAME FROM REVIEWER WHERE REVIEWERID IN(SELECT REVIEWERID FROM RATING WHERE RATINGDATE IS NULL AND REVIEWER.REVIEWERID=RATING.REVIEWERID);
+---------------+
| REVIEWERNAME  |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+

8. For each movie that has some rating, ﬁnd 

a)SELECT TITLE,STARS FROM MOVIE,RATING WHERE MOVIE.MOVIEID=RATING.MOVIEID AND STARS IN(SELECT MAX(STARS) FROM RATING ) ORDER BY TITLE;
+------------+-------+
| TITLE      | STARS |
+------------+-------+
| Avatar     |     5 |
| Snow White |     5 |
+------------+-------+
b)SELECT TITLE,STARS FROM MOVIE,RATING WHERE MOVIE.MOVIEID=RATING.MOVIEID AND STARS IN(SELECT MIN(STARS) FROM RATING ) ORDER BY TITLE;
+-------------------------+-------+
| TITLE                   | STARS |
+-------------------------+-------+
| E.T.                    |     2 |
| Gone with the Wind      |     2 |
| Raiders of the Lost Ark |     2 |
| The Sound of Music      |     2 |
+-------------------------+-------+
c)SELECT AVG(STARS) FROM RATING;
+------------+
| AVG(STARS) |
+------------+
|     3.2857 |
+------------+
d)SELECT SUM(STARS) FROM RATING;
+------------+
| SUM(STARS) |
+------------+
|         46 |
+------------+
e)SELECT TITLE,COUNT(RATING.MOVIEID) AS N_TIMES FROM RATING,MOVIE WHERE RATING.MOVIEID=MOVIE.MOVIEID GROUP BY RATING.MOVIEID ORDER BY TITLE;
+-------------------------+----------+
| TITLE                   | N_TIMES  |
+-------------------------+----------+
| Avatar                  |        2 |
| E.T.                    |        2 |
| Gone with the Wind      |        3 |
| Raiders of the Lost Ark |        3 |
| Snow White              |        2 |
| The Sound of Music      |        2 |
+-------------------------+----------+


9. Find the names of all the reviewers who have contributed three or more ratings. Write

a)SELECT REVIEWERNAME FROM REVIEWER INNER JOIN RATING USING(REVIEWERID) GROUP BY REVIEWERID HAVING COUNT(*)>=3;
+-----------------+
| REVIEWERNAME    |
+-----------------+
| Brittany Harris |
| Chris Jackson   |
+-----------------+
 
 (b) a non-correlated nested query. (5 marks) 

c)SELECT REVIEWERNAME FROM REVIEWER WHERE (SELECT COUNT(*) FROM RATING WHERE RATING.REVIEWERID = REVIEWER.REVIEWERID) >= 3;
+-----------------+
| REVIEWERNAME    |
+-----------------+
| Brittany Harris |
| Chris Jackson   |
+-----------------+


10. Select movie ids of each movie with its title,reviewer id nd stars received

MariaDB [e15385lab04]> select MOVIE.MOVIEID,MOVIE.TITLE,RATING.REVIEWERID,RATING
.STARS from MOVIE RIGHT JOIN RATING ON MOVIE.MOVIEID=RATING.MOVIEID ;
+---------+-------------------------+------------+-------+
| MOVIEID | TITLE                   | REVIEWERID | STARS |
+---------+-------------------------+------------+-------+
|     101 |  Gone with the Wind     |        201 |     2 |
|     101 |  Gone with the Wind     |        201 |     4 |
|     101 |  Gone with the Wind     |        201 |     3 |
|     106 | Snow White              |        202 |     4 |
|     103 | The Sound of Music      |        203 |     2 |
|     108 | Raiders of the Lost Ark |        203 |     4 |
|     108 | Raiders of the Lost Ark |        203 |     6 |
|     101 |  Gone with the Wind     |        204 |     4 |
|     103 | The Sound of Music      |        205 |     4 |
|     104 | E.T.                    |        205 |     3 |
|     108 | Raiders of the Lost Ark |        205 |     5 |
|     106 | Snow White              |        206 |     4 |
|     107 | Avatar                  |        206 |     5 |
|     107 | Avatar                  |        207 |     5 |
|     104 | E.T.                    |        208 |     3 |
+---------+-------------------------+------------+-------+
15 rows in set (0.27 sec)

11. List the movie titles and average ratings, from the highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. (5 marks) 

SELECT TITLE, AVG(STARS)  FROM MOVIE INNER JOIN RATING USING(MOVIEID) GROUP BY MOVIEID ORDER BY AVG(STARS) DESC, title;
+-------------------------+------------+
| TITLE                   | AVG(STARS) |
+-------------------------+------------+
| Snow White              |     4.5000 |
| Avatar                  |     4.0000 |
| Raiders of the Lost Ark |     3.3333 |
| Gone with the Wind      |     3.0000 |
| E.T.                    |     2.5000 |
| The Sound of Music      |     2.5000 |
+-------------------------+------------+


12. Remove all ratings where the movie’s year is before 1970 or after 2000. (5 marks) 

MariaDB [e15385lab04]> DELETE from RATING where MOVIEID IN(select MOVIEID from M
OVIE where YEAR <'1970' OR YEAR>'2000');
Query OK, 10 rows affected (0.52 sec)


MariaDB [e15385lab04]> SELECT * from RATING;
+------------+---------+-------+------------+
| REVIEWERID | MOVIEID | STARS | RATINGDATE |
+------------+---------+-------+------------+
|        203 |     108 |     4 | 2011-01-30 |
|        203 |     108 |     6 | 2011-01-12 |
|        205 |     104 |     3 | 2011-01-22 |
|        205 |     108 |     5 | NULL       |
|        208 |     104 |     4 | 2011-01-02 |
+------------+---------+-------+------------+
5 rows in set (0.00 sec)

13. Remove all ratings where the rating date is NULL. (5 marks) 

MariaDB [e15385lab04]> DELETE from RATING where RATINGDATE IS NULL;
Query OK, 1 row affected (0.08 sec)

MariaDB [e15385lab04]> SELECT * from RATING;
+------------+---------+-------+------------+
| REVIEWERID | MOVIEID | STARS | RATINGDATE |
+------------+---------+-------+------------+
|        203 |     108 |     4 | 2011-01-30 |
|        203 |     108 |     6 | 2011-01-12 |
|        205 |     104 |     3 | 2011-01-22 |
|        208 |     104 |     4 | 2011-01-02 |
+------------+---------+-------+------------+
4 rows in set (0.00 sec)

14. Insert 5-star ratings by James Cameron for all movies in the database. Leave the review date as NULL. (5 marks) 



15. For all movies that have an average rating of 4 stars or higher, add 25 to the release year. (Update the existing tuples. Do not insert new tuples). (5 marks


